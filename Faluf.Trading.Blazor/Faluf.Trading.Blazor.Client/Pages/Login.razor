@page "/login"

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg border-0">
                <div class="card-body p-4">
                    <h3 class="text-center mb-4">Login</h3>

                    <EditForm Model="@loginInputModel" OnValidSubmit="LoginAsync">
                        <FluentValidationValidator />

                        <!-- Email Field -->
                        <div class="mb-3">
                            <label for="email" class="form-label">Email:</label>
                            <InputText id="email" @bind-Value="@loginInputModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => loginInputModel.Email)" class="text-danger" />
                        </div>

                        <!-- Password Field -->
                        <div class="mb-3">
                            <label for="password" class="form-label">Password:</label>
                            <InputText id="password" type="password" @bind-Value="@loginInputModel.Password" class="form-control" />
                            <ValidationMessage For="@(() => loginInputModel.Password)" class="text-danger" />
                        </div>

                        <!-- Remember Me Checkbox -->
                        <div class="form-check mb-3">
                            <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="@loginInputModel.IsRememberMeChecked" />
                            <label class="form-check-label" for="rememberMe">Remember me</label>
                        </div>

                        <!-- Login Button -->
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-block">Login</button>
                        </div>
                    </EditForm>

                    <!-- Error Message -->
                    @if (errorMessage is not null)
                    {
                        <div class="alert alert-danger mt-3">
                            <span>@errorMessage</span>
                        </div>
                    }
                </div>
            </div>

            <!-- Register Link -->
            <div class="text-center mt-3">
                <p>Don't have an account? <a href="/register">Register here</a></p>
            </div>
        </div>
    </div>
</div>

@code {
	[Parameter, SupplyParameterFromQuery]
	public string? ReturnUrl { get; set; }

	private readonly LoginInputModel loginInputModel = new() { ClientType = ClientType.Blazor };

	private string? errorMessage;

	private async Task LoginAsync()
	{
		Result<TokenDTO> loginResult = await AuthService.LoginAsync(loginInputModel);

		if (!loginResult.IsSuccess)
		{
			errorMessage = loginResult.ErrorMessage + " " + loginResult.ExceptionMessage + " " + loginResult.InnerExceptionMessage + " " + loginResult.StackTrace;

			return;
		}

		NavigationManager.NavigateTo(!string.IsNullOrWhiteSpace(ReturnUrl) ? ReturnUrl : "/", forceLoad: true);
	}
}